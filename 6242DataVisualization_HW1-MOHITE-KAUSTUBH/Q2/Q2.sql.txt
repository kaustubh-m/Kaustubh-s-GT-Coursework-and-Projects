
.separator "%"

CREATE TABLE MOVIES(MOVIE_ID INTEGER, NAME TEXT, GENRE TEXT);



.import movies.txt movies



create table ratings(user_id integer, movie_id integer, rating real, timestamp integer);

.import ratings.txt ratings





SELECT NULL;

.separator ","
CREATE INDEX MOVIES_PRIMARY_INDEX
ON MOVIES (MOVIE_ID);

CREATE INDEX MOVIES_SECONDARY_INDEX
ON RATINGS (MOVIE_ID);


SELECT NULL;


SELECT COUNT (*) FROM
(
SELECT MOVIE_ID, COUNT(USER_ID) AS REVIEW_COUNT, AVG(RATING) AS AVG_RATING 
FROM RATINGS 
GROUP BY MOVIE_ID 
HAVING (REVIEW_COUNT >= 500 AND AVG_RATING >= 3.5)
);


SELECT NULL;

SELECT M.MOVIE_ID AS MOVIE_ID, NAME AS MOVIE_NAME, COUNT(USER_ID) AS REVIEW_COUNT
FROM RATINGS AS R JOIN MOVIES AS M
ON M.MOVIE_ID = R.MOVIE_ID
GROUP BY M.MOVIE_ID, NAME 
HAVING (REVIEW_COUNT >= 2500)
ORDER BY REVIEW_COUNT DESC, MOVIE_NAME;


SELECT NULL;

SELECT R.MOVIE_ID AS MOVIE_ID, NAME AS MOVIE_NAME, AVG(RATING) AS AVG_RATING 
FROM RATINGS AS R JOIN MOVIES AS M 
ON R.MOVIE_ID = M.MOVIE_ID
GROUP BY R.MOVIE_ID
ORDER BY AVG_RATING DESC, NAME
LIMIT 10;

SELECT NULL;

SELECT NAME AS MOVIE_NAME, AVG(RATING) AS AVG_RATING, COUNT(USER_ID) AS REVIEW_COUNT, GENRE AS MOVIE_GENRE 
FROM RATINGS AS R JOIN MOVIES AS M 
ON R.MOVIE_ID = M.MOVIE_ID
GROUP BY R.MOVIE_ID
HAVING REVIEW_COUNT >= 1000
ORDER BY AVG_RATING DESC, MOVIE_NAME, MOVIE_GENRE
LIMIT 8;

SELECT NULL;

CREATE VIEW COMMON_INTERESTS AS
SELECT X.USER_ID AS USER_ID1, Y.USER_ID AS USER_ID2, X.MOVIE_NAME
FROM

(SELECT USER_ID, R1.MOVIE_ID, MOVIE_NAME 
FROM RATINGS R1 JOIN
(SELECT R2.MOVIE_ID AS MOVIE_ID, NAME AS MOVIE_NAME, COUNT(USER_ID) AS REVIEW_COUNT 
FROM RATINGS R2 JOIN MOVIES M 
ON R2.MOVIE_ID = M.MOVIE_ID
GROUP BY R2.MOVIE_ID
HAVING REVIEW_COUNT = 10
ORDER BY MOVIE_NAME) Z

ON R1.MOVIE_ID = Z.MOVIE_ID) X

JOIN

(SELECT USER_ID, R3.MOVIE_ID, MOVIE_NAME 
FROM RATINGS R3 JOIN
(SELECT R4.MOVIE_ID AS MOVIE_ID, NAME AS MOVIE_NAME, COUNT(USER_ID) AS REVIEW_COUNT 
FROM RATINGS R4 JOIN MOVIES M 
ON R4.MOVIE_ID = M.MOVIE_ID
GROUP BY R4.MOVIE_ID
HAVING REVIEW_COUNT = 10
ORDER BY MOVIE_NAME) Z

ON R3.MOVIE_ID = Z.MOVIE_ID) Y


ON X.MOVIE_ID = Y.MOVIE_ID
WHERE USER_ID1 < USER_ID2
;

SELECT NULL;

SELECT COUNT(*) AS COMMON_INTEREST_COUNT FROM (SELECT DISTINCT USER_ID1, USER_ID2 FROM COMMON_INTERESTS);


SELECT NULL;

CREATE VIRTUAL TABLE MOVIE_OVERVIEW USING FTS4(ID INTEGER, NAME TEXT,YEAR INTEGER,OVERVIEW TEXT,POPULARITY DECIMAL);
.separator ","
.import movie-overview.txt movie_overview

SELECT COUNT(ID) FROM MOVIE_OVERVIEW WHERE (OVERVIEW MATCH 'DEATH' OR OVERVIEW MATCH 'LIFE');

SELECT NULL;

SELECT ID FROM MOVIE_OVERVIEW WHERE (OVERVIEW MATCH 'LIFE NEAR/6 ABOUT');
































